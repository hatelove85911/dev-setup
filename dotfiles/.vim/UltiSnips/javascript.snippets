snippet fun "function" w
function ${1:name}(${2}) {
  ${3}
}${0}
endsnippet

snippet iife "Immediately-Invoked Function Expression (iife)"
(function(${1:window}) {
  ${VISUAL}$0
}(${2:$1}))
endsnippet

snippet vo "object assigned to var"
${1:var }${2:variable_name} = {
  $3: $4
}
endsnippet

snippet clg "console.log"
console.log($1)$0
endsnippet

#############################################
# es6
#############################################
snippet afn "fat arrow function" i
${1} => ${2}
endsnippet

snippet gfn "generator function"
function* ${1:name}(${2}) {
	yield ${3};
}
endsnippet

snippet class
class ${1:name} {
	constructor(${2:arg}) {
		${3:// init}
	}
	${4}
}
endsnippet

snippet forof
for (let ${1:s} of ${2:sequence}) {
	${3}
}
endsnippet

snippet imp
import ${1:foo} from '${2:bar}'
endsnippet

snippet sfn "es6 short function"
${1}(${2}) {
  ${3}
}${0}
endsnippet

#############################################
# meteor
#############################################
snippet publish "meteor publish" b
import {Meteor} from 'meteor/meteor'
import {${1}} from '../${2}'

Meteor.publish('${3:publication name}', function(${4}){
  ${0}
})
endsnippet

snippet method "meteor method" b
import {Meteor} from 'meteor/meteor'
import {${1}} from './${2}'

Meteor.methods({
  '${3:method name}'(${4}) {
    ${0}
  }
})
endsnippet

snippet collection "meteor collection" b
import {Meteor} from 'meteor/meteor'
import {Mongo} from 'meteor/mongo'
import {check} from 'meteor/check'
import {SimpleSchema} from 'meteor/aldeed:simple-schema'
import {Collection2} from 'meteor/aldeed:collection2'
import {CollectionHelpers} from 'meteor/dburles:collection-helpers'

export const ${1} = new Mongo.Collection('${2:collection name}')${0}
endsnippet
#############################################
# react
#############################################
snippet impr "import react" b
import React from 'react'
${0}
endsnippet

snippet imprd "import react-dom" b
import ReactDOM from 'react-dom'
${0}
endsnippet


snippet rcomp "react component" b
class ${1} extends Component {
  init() {
  }
  render() {
    return (
      ${2}
    )
  }
}
endsnippet

snippet cdm "Component did mount" b
componentDidMount(){
  ${1}
}${0}
endsnippet
snippet cwum "Component will unmount" b
componentWillUnmount(){
  ${1}
}${0}
endsnippet
snippet cwm "Component will mount" b
componentWillMount(){
  ${1}
}${0}
endsnippet
snippet cdu "Component did update" b
componentDidUpdate(){
  ${1}
}${0}
endsnippet
snippet scu "Should component update" b
shouldComponentUpdate(){
  ${1}
}${0}
endsnippet
#############################################
# redux
#############################################
snippet reducer "redux reducer" b
const ${1} = (state, action) => {
  switch (action.type){
    case '${2}':
      ${3}
      break
    default:
      return state
  }
}
endsnippet

#############################################
# rxjs
#############################################
snippet obs "Observable" b
Rx.Observable
endsnippet
#############################################
# jsx
#############################################
snippet /// "jsx comment"
{/*
${1}
/*}${0}
endsnippet
