# Start docker daemon
docker -d

# start a container with an interactive shell
docker run -ti <image_name> /bin/bash

# "shell" into a running container (docker-1.3+)
docker exec -ti <container_name> bash

# inspect a running container
docker inspect <container_name> (or <container_id>)

# Get the process ID for a container
# Source: https://github.com/jpetazzo/nsenter
docker inspect --format {{.State.Pid}} <container_name_or_ID>

# List the current mounted volumes for a container (and pretty print)
# Source:
# http://nathanleclaire.com/blog/2014/07/12/10-docker-tips-and-tricks-that-will-make-you-sing-a-whale-song-of-joy/
docker inspect --format='{{json .Volumes}}' <container_id> | python -mjson.tool

# Copy files/folders between a container and your host
docker cp foo.txt mycontainer:/foo.txt

# list currently running containers
docker ps

# list all containers
docker ps -a

# list all images
docker images


########################################
# run web development locally
########################################
# frontend project + nginx
docker run [--name container_name] -d -p 8080:80 -v `pwd`:/usr/share/nginx/html nginx:stable
docker run [--name container_name] -d -p 8080:80 -v `pwd`:/usr/share/nginx/html -v /some/nginx.conf:/etc/nginx/nginx.conf:ro -d nginx:stable
# backend project + nodejs
docker run [--name container_name] -d -p host_port:container_port -v `pwd`:/usr/src/app node:latest npm start
# docker run -it --rm --name my-running-script -v "$PWD":/usr/src/app -w /usr/src/app node:4 node your-daemon-or-script.js
